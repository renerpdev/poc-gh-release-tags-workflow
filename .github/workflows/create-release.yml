name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select the type of release (patch, minor, major)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      is_prerelease:
        description: "Check to create a pre-release"
        required: true
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Calculate next tag
        id: calculate-next-tag
        run: |
          # Extract components of the SemVer tag
          IFS='.' read -ra PARTS <<< "${{ env.latest_tag#v }}"
          major=${PARTS[0]:-0}
          minor=${PARTS[1]:-0}
          patch=${PARTS[2]:-0}

          # Determine release type
          release_type="${{ github.event.inputs.release_type }}"
          case $release_type in
            patch)
              patch=$((patch + 1))
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            *)
              echo "Invalid release type: $release_type"
              exit 1
              ;;
          esac

          # Generate the next tag
          next_tag="v$major.$minor.$patch"

          echo "Next tag: $next_tag"
          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Generate Release Body
        id: generate-release-body
        run: |
          # Generate the list of commits between the latest tag and HEAD
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            changelog=$(git log --oneline)
          else
            changelog=$(git log ${GITHUB_ENV:?"latest_tag"}..HEAD --oneline)
          fi

          # Format the body of the release
          body="## Changes in ${{ env.next_tag }}\n\n$changelog"
          echo "Generated release body:"
          echo "$body"
          echo "release_body=$body" >> $GITHUB_ENV

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define if the release is a pre-release
          prerelease=${{ github.event.inputs.is_prerelease }}

          # Create the release using the GitHub API
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @- << EOF
          {
            "tag_name": "${{ env.next_tag }}",
            "target_commitish": "main",
            "name": "Release ${{ env.next_tag }}",
            "body": "${{ env.release_body }}",
            "draft": false,
            "prerelease": $prerelease
          }
          EOF

      - name: Output Release Info
        run: |
          echo "Release created with tag ${{ env.next_tag }}"