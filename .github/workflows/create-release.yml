name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Select the release type"
        required: true
        type: choice
        options:
          - Patch
          - Minor
          - Major
        default: Minor
      is_prerelease:
        description: "Create a pre-release"
        required: true
        type: boolean
        default: true
      is_draft:
        description: "Mark as a draft"
        required: true
        type: boolean
        default: true

permissions:
  contents: write
  actions: write 

jobs:
  Create-Release:
    name: Create ${{ github.event.inputs.release_type }} ${{ github.event.inputs.is_prerelease == 'true' && 'Pre-release' || 'Release' }} ${{ github.event.inputs.is_draft == 'true' && '(Draft)' || '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Downloads also the tags
          persist-credentials: false

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Verify if there are any tags in the repository
          if [ "$(git tag)" = "" ]; then
            echo "No tags found. Defaulting to v0.0.0"
            echo "latest_tag=v0.0.0" >> $GITHUB_ENV
          else
            # Get the latest tag based on chronological order
            latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
            echo "Latest tag: $latest_tag"
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          fi

      - name: Calculate next tag
        id: calculate-next-tag
        run: |
          # Extract the latest tag, stripping the 'v' prefix if it exists
          latest_tag="${{ env.latest_tag }}"
          latest_version="${latest_tag#v}" # Strips 'v' if present

          # Split the version into major, minor, and patch components
          IFS='.' read -ra PARTS <<< "$latest_version"
          major=${PARTS[0]:-0}
          minor=${PARTS[1]:-0}
          patch=${PARTS[2]:-0}

          # Determine release type
          release_type="${{ github.event.inputs.release_type }}"
          case $release_type in
            Patch)
              patch=$((patch + 1))
              ;;
            Minor)
              minor=$((minor + 1))
              patch=0
              ;;
            Major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            *)
              echo "Invalid release type: $release_type"
              exit 1
              ;;
          esac

          # Generate the next tag
          next_tag="v$major.$minor.$patch"

          echo "Next tag: $next_tag"
          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Generate Release Body
        id: generate-release-body
        run: |
          # Check if this is the first release (no previous tags)
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            echo "No previous tags found. Generating changelog for all commits."
            changelog=$(git log --pretty=format:"- %h %s" --no-merges)
          else
            echo "Generating changelog from the latest tag to current ref."
            changelog=$(git log "${{ env.latest_tag }}".."${{ github.ref_name }}" --pretty=format:"- %h %s" --no-merges)
          fi

          is_draft=${{ github.event.inputs.is_draft }}

          # Generate the full changelog link
          changelog_link="https://github.com/${{ github.repository }}/compare/${{ env.latest_tag }}...${{ env.next_tag }}"

          # Escape special characters in the changelog for JSON
          changelog=$(echo -e "$changelog\n\nFull Changelog: $changelog_link" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g' | sed "s/'/\\'/g")

          # Format the release body
          body="## Changes in ${{ env.next_tag }}\\n\\n$changelog"
          echo "Generated release body:"
          echo "$body"

          # Write the sanitized release body to $GITHUB_ENV
          echo "release_body=$body" >> $GITHUB_ENV

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define if the release is a pre-release
          is_prerelease=${{ github.event.inputs.is_prerelease }}
          is_draft=${{ github.event.inputs.is_draft }}
          release_type=${{ github.event.inputs.release_type }}

          # Dynamically set the release name based on the release type
          case "$release_type" in
            Patch)
              release_name="Patch Release ${{ env.next_tag }}"
              ;;
            Minor)
              release_name="Minor Release ${{ env.next_tag }}"
              ;;
            Major)
              release_name="Major Release ${{ env.next_tag }}"
              ;;
            *)
              echo "Unknown release type: $release_type"
              exit 1
              ;;
          esac

          # Create the release using the GitHub API
          response=$(curl -s -o response.json -w "%{http_code}" \
          -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @- << EOF
          {
            "tag_name": "${{ env.next_tag }}",
            "target_commitish": "${{ github.ref_name }}",
            "name": "$release_name",
            "body": "${{ env.release_body }}",
            "draft": $is_draft,
            "prerelease": $is_prerelease
          }
          EOF
          )

          # Check if the request was successful
          if [ "$response" -ne 201 ]; then
            echo "Failed to create release. Response code: $response"
            echo "Response body:"
            cat response.json
            exit 1
          fi

          echo "Release created successfully!"

      - name: Output Release Info
        run: |
          echo "Release created with tag ${{ env.next_tag }}"

      - name: Trigger Deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.is_prerelease }}" == "true" ]; then
            environment="Staging"
          elif [ "${{ github.event.inputs.is_prerelease }}" == "false" ]; then
            environment="Production"
          else
            echo "Error: Invalid value for is_prerelease input"
            exit 1
          fi

          response=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/create-deployment.yml/dispatches \
            -d @- << EOF
          {
            "ref": "${{ github.ref }}",
            "inputs": {
              "environment": "$environment", 
              "is_preview": "${{ github.event.inputs.is_draft }}" 
            }
          }
          EOF
          )

          if [ "$response" -ne 204 ]; then
            echo "Failed to dispatch deployment event. HTTP response code: $response"
            echo "Response body:"
            cat response.json
            exit 1
          else
            echo "Deployment event dispatched successfully!"
          fi